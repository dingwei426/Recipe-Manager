package org.example.myproject.Authentication;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.example.myproject.DAO.UserDAO;
import org.example.myproject.Model.User;
import org.example.myproject.TopLevelMenu;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.io.InputStream;
import java.util.Locale;

// login frame that verify login credentials provided by user
public class LoginFrame extends JFrame implements ItemListener, ActionListener {
    private JTextField usernameField;
    private JPasswordField passwordField;
    private JButton loginButton, signUpButton;
    private JLabel loginTitle, usernameLabel, passwordLabel, imageLabel;
    private JPanel loginPanel;
    private JCheckBox showPasswordCheckBox;

    public LoginFrame() {
        //set up login frame
        setTitle("Login");
        setVisible(true);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(new Dimension(500, 400));
        setLocationRelativeTo(null); // Center the frame on the screen
        setResizable(false);
        setContentPane(loginPanel);

        // add action listener
        loginButton.addActionListener(this);
        signUpButton.addActionListener(this);
        passwordField.addActionListener(this);
        showPasswordCheckBox.addItemListener(this);

//      read cake icon
        InputStream cakeImgInputStream = LoginFrame.class.getClassLoader().getResourceAsStream("loginIconCake.png");
        Image cakeImage;
        try {
            assert cakeImgInputStream != null;
            cakeImage = ImageIO.read(cakeImgInputStream).getScaledInstance(imageLabel.getWidth(), imageLabel.getHeight(),
                    Image.SCALE_SMOOTH);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        ImageIcon imageCakeIcon = new ImageIcon(cakeImage);

//      set icon of the window
        setIconImage(imageCakeIcon.getImage());

//      set image as logo
        imageLabel.setIcon(imageCakeIcon);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        try {
            // verify login credentials
            if (e.getSource() == loginButton) {
                User user = new User(usernameField.getText(), passwordField.getText());
                if (UserDAO.login(user)) {
                    dispose();
                    new TopLevelMenu(user);
                } else
                    JOptionPane.showMessageDialog(loginButton, "Login Failed. Please try again.");
            } else if (e.getSource() == passwordField) {
                loginButton.doClick();  // click login button if enter is pressed
            } else if (e.getSource() == signUpButton) {
                new SignUpFrame();
            }
        } catch (Exception ae) {
            System.out.println(e);
        }
    }

    @Override
    // set up showPasswordCheckBox
    public void itemStateChanged(ItemEvent e) {
        try {
            if (e.getSource() == showPasswordCheckBox) {
                int state = e.getStateChange();
                if (state == ItemEvent.SELECTED) {
                    // Show the password
                    passwordField.setEchoChar((char) 0);
                } else {
                    // Hide the password (use the default password character, typically '*')
                    passwordField.setEchoChar('\u2022');
                }
            }
        } catch (Exception ae) {
            ae.printStackTrace(); // It's better to print the exception's stack trace for debugging
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        loginPanel = new JPanel();
        loginPanel.setLayout(new GridLayoutManager(9, 4, new Insets(0, 0, 0, 0), -1, -1));
        loginPanel.setBackground(new Color(-855310));
        loginTitle = new JLabel();
        Font loginTitleFont = this.$$$getFont$$$("Cooper Black", Font.BOLD, 20, loginTitle.getFont());
        if (loginTitleFont != null) loginTitle.setFont(loginTitleFont);
        loginTitle.setForeground(new Color(-7617718));
        loginTitle.setText("Recipe Manager Login");
        loginPanel.add(loginTitle, new GridConstraints(1, 1, 4, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usernameLabel = new JLabel();
        Font usernameLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, usernameLabel.getFont());
        if (usernameLabelFont != null) usernameLabel.setFont(usernameLabelFont);
        usernameLabel.setForeground(new Color(-9462725));
        usernameLabel.setText("Username");
        loginPanel.add(usernameLabel, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        usernameField = new JTextField();
        usernameField.setText("");
        loginPanel.add(usernameField, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        passwordLabel = new JLabel();
        Font passwordLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, passwordLabel.getFont());
        if (passwordLabelFont != null) passwordLabel.setFont(passwordLabelFont);
        passwordLabel.setForeground(new Color(-9462725));
        passwordLabel.setText("Password");
        loginPanel.add(passwordLabel, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        passwordField = new JPasswordField();
        loginPanel.add(passwordField, new GridConstraints(4, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        showPasswordCheckBox = new JCheckBox();
        Font showPasswordCheckBoxFont = this.$$$getFont$$$(null, Font.BOLD, -1, showPasswordCheckBox.getFont());
        if (showPasswordCheckBoxFont != null) showPasswordCheckBox.setFont(showPasswordCheckBoxFont);
        showPasswordCheckBox.setForeground(new Color(-9462725));
        showPasswordCheckBox.setText("show password");
        loginPanel.add(showPasswordCheckBox, new GridConstraints(5, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imageLabel = new JLabel();
        imageLabel.setText("");
        loginPanel.add(imageLabel, new GridConstraints(5, 1, 3, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(100, 100), null, 0, false));
        final Spacer spacer1 = new Spacer();
        loginPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        loginButton = new JButton();
        loginButton.setBackground(new Color(-7617718));
        loginButton.setEnabled(true);
        loginButton.setForeground(new Color(-1));
        loginButton.setHideActionText(false);
        loginButton.setHorizontalAlignment(0);
        loginButton.setHorizontalTextPosition(10);
        loginButton.setOpaque(true);
        loginButton.setRequestFocusEnabled(true);
        loginButton.setSelected(true);
        loginButton.setText("Login");
        loginPanel.add(loginButton, new GridConstraints(6, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        signUpButton = new JButton();
        signUpButton.setBackground(new Color(-7617718));
        signUpButton.setForeground(new Color(-1));
        signUpButton.setText("Sign Up");
        loginPanel.add(signUpButton, new GridConstraints(7, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        loginPanel.add(spacer2, new GridConstraints(8, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        loginPanel.add(spacer3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        loginPanel.add(spacer4, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return loginPanel;
    }
}
