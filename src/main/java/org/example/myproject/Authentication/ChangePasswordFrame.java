package org.example.myproject.Authentication;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.example.myproject.DAO.UserDAO;
import org.example.myproject.Model.User;
import org.example.myproject.TopLevelMenu;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.InputStream;
import java.util.Locale;

// change password frame that allow users to change their password
public class ChangePasswordFrame extends JFrame implements ActionListener {
    private JLabel logoPicLabel, recipeManagerLabel, usernameLabel, loginTitle;
    private JTextField usernameField;
    private JPasswordField oldPasswordField, newPasswordField, confirmPasswordField;
    private JButton changePasswordButton, previousButton;
    private JPanel ChangePasswordPanel;
    private final User user;

    public ChangePasswordFrame(User user) {
        // set up change password frame
        setContentPane(ChangePasswordPanel);
        setTitle("Change Password");
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        setSize(new Dimension(400, 400));
        setLocationRelativeTo(null); // Center the frame on the screen
        setResizable(false);

        this.user = user;

        // add action listener
        changePasswordButton.addActionListener(this);
        confirmPasswordField.addActionListener(this);
        previousButton.addActionListener(this);

        //      read cake icon
        InputStream cakeImgInputStream = TopLevelMenu.class.getClassLoader().getResourceAsStream("loginIconCake.png");
        Image cakeImage;
        try {
            assert cakeImgInputStream != null;
            cakeImage = ImageIO.read(cakeImgInputStream).getScaledInstance(30, 30,
                    Image.SCALE_SMOOTH);
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        ImageIcon imageCakeIcon = new ImageIcon(cakeImage);

        //  set icon of the window
        setIconImage(imageCakeIcon.getImage());

        //  set image as logo
        logoPicLabel.setIcon(imageCakeIcon);
    }

    @Override
    // check whether each required information is provided correctly
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == changePasswordButton) {
            String username = usernameField.getText();
            String oldPassword = oldPasswordField.getText();
            String newPassword = newPasswordField.getText();
            String confirmPassword = confirmPasswordField.getText();
            if (username.isEmpty())
                JOptionPane.showMessageDialog(ChangePasswordPanel, "Please enter your username.");
            else if (!username.equals(user.getUsername())) {
                JOptionPane.showMessageDialog(ChangePasswordPanel, "Username is incorrect.");
            } else if (!UserDAO.login(new User(username, oldPassword))) {
                JOptionPane.showMessageDialog(ChangePasswordPanel, "Password is incorrect.");
            } else if (oldPassword.equals(newPassword)) {
                JOptionPane.showMessageDialog(ChangePasswordPanel, "New password must be different from old password.");
            } else if (!newPassword.equals(confirmPassword)) {
                JOptionPane.showMessageDialog(ChangePasswordPanel, "Confirm Password is not same with New Password.");
            } else if (!SignUpFrame.passwordChecker(newPassword)) {
                JOptionPane.showMessageDialog(ChangePasswordPanel, "Password must be at least 8 characters long, contains at least one digit,\none lowercase letter, one uppercase letter, and one special character.\nPassword should not contain whitespace.");
            } else {
                JOptionPane.showMessageDialog(ChangePasswordPanel, UserDAO.changePassword(new User(username, newPassword)));
                dispose();
                new UserMenu(user);
            }
        } else if (e.getSource() == confirmPasswordField) {
            changePasswordButton.doClick();
        } else if (e.getSource() == previousButton) {
            dispose();
            new UserMenu(user);
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        ChangePasswordPanel = new JPanel();
        ChangePasswordPanel.setLayout(new GridLayoutManager(2, 3, new Insets(0, 0, 0, 0), -1, -1));
        logoPicLabel = new JLabel();
        logoPicLabel.setText("");
        ChangePasswordPanel.add(logoPicLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        ChangePasswordPanel.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        recipeManagerLabel = new JLabel();
        Font recipeManagerLabelFont = this.$$$getFont$$$("Britannic Bold", Font.ITALIC, 14, recipeManagerLabel.getFont());
        if (recipeManagerLabelFont != null) recipeManagerLabel.setFont(recipeManagerLabelFont);
        recipeManagerLabel.setForeground(new Color(-10724260));
        recipeManagerLabel.setText("Recipe Manager");
        ChangePasswordPanel.add(recipeManagerLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(7, 3, new Insets(0, 0, 0, 0), -1, -1));
        ChangePasswordPanel.add(panel1, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(panel2, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        usernameField = new JTextField();
        usernameField.setText("");
        panel2.add(usernameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$(null, Font.BOLD, -1, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-9462725));
        label1.setText("Old Password");
        panel2.add(label1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        Font label2Font = this.$$$getFont$$$(null, Font.BOLD, -1, label2.getFont());
        if (label2Font != null) label2.setFont(label2Font);
        label2.setForeground(new Color(-9462725));
        label2.setText("New Password");
        panel2.add(label2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        Font label3Font = this.$$$getFont$$$(null, Font.BOLD, -1, label3.getFont());
        if (label3Font != null) label3.setFont(label3Font);
        label3.setForeground(new Color(-9462725));
        label3.setText("Confirm New Password");
        panel2.add(label3, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        oldPasswordField = new JPasswordField();
        panel2.add(oldPasswordField, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        newPasswordField = new JPasswordField();
        panel2.add(newPasswordField, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        confirmPasswordField = new JPasswordField();
        panel2.add(confirmPasswordField, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        usernameLabel = new JLabel();
        Font usernameLabelFont = this.$$$getFont$$$(null, Font.BOLD, -1, usernameLabel.getFont());
        if (usernameLabelFont != null) usernameLabel.setFont(usernameLabelFont);
        usernameLabel.setForeground(new Color(-9462725));
        usernameLabel.setText("Username");
        panel2.add(usernameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(6, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer3 = new Spacer();
        panel1.add(spacer3, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        changePasswordButton = new JButton();
        changePasswordButton.setBackground(new Color(-7617718));
        changePasswordButton.setEnabled(true);
        changePasswordButton.setForeground(new Color(-1));
        changePasswordButton.setHideActionText(false);
        changePasswordButton.setHorizontalAlignment(0);
        changePasswordButton.setHorizontalTextPosition(10);
        changePasswordButton.setOpaque(true);
        changePasswordButton.setRequestFocusEnabled(true);
        changePasswordButton.setSelected(true);
        changePasswordButton.setText("Change Password");
        panel1.add(changePasswordButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loginTitle = new JLabel();
        Font loginTitleFont = this.$$$getFont$$$("Cooper Black", Font.BOLD, 24, loginTitle.getFont());
        if (loginTitleFont != null) loginTitle.setFont(loginTitleFont);
        loginTitle.setForeground(new Color(-7617718));
        loginTitle.setText("Account Settings");
        panel1.add(loginTitle, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer4 = new Spacer();
        panel1.add(spacer4, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final Spacer spacer5 = new Spacer();
        panel1.add(spacer5, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer6 = new Spacer();
        panel1.add(spacer6, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        previousButton = new JButton();
        previousButton.setBackground(new Color(-1));
        previousButton.setEnabled(true);
        previousButton.setForeground(new Color(-7617718));
        previousButton.setHideActionText(false);
        previousButton.setHorizontalAlignment(0);
        previousButton.setHorizontalTextPosition(10);
        previousButton.setOpaque(true);
        previousButton.setRequestFocusEnabled(true);
        previousButton.setSelected(true);
        previousButton.setText("Previous");
        panel1.add(previousButton, new GridConstraints(5, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return ChangePasswordPanel;
    }
}
